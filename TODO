* refactor methods in bin/beet to use each other (lots of duplication between generate and just_recipe
  ( maybe just make generate a boolean option rather than a method )
* refactor so you can use template names in the recipe calls along with local paths and remote paths

* fixup places where its obviously just rails stuff, like add_gems
* generate command in bin/beet should have executor stuff pulled out of case, ie, it should always run
* create a better way to mixin things from rails/whatever as needed inside Beet::Executor

* figure out if its worth it to use similar step definitions as done in Jeweler for gems that generate stuff
and want to verify things worked correctly

* create a "if gem_exists?('browsercms')" type method
  * perhaps repurpose the search_for_rails_2 method to search for any installed gem

* add ability to set --prefix rails3 so you're not typing rails3/auth/devise, rails3/js/jquery, etc, just
  beet -g foo --prefix rails3 -r auth/devise, js/jquery
  * in fact, maybe make a .beetrc file where you can set a prefix permanently. 

* use aruba to test beet - http://github.com/aslakhellesoy/aruba

* write recipes for
  * multiple file uploads
  * facebook connect with devise - http://stackoverflow.com/questions/3580557/rails-3-using-devise-how-to-allow-someone-to-log-in-using-their-facebook-account

* add in a "recipe not found: #{recipe}" so when things don't run it doesn't silently fail
